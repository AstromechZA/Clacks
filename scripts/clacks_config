#!/usr/bin/env python

import click

from clacks.configuration import config

_VALID_KEYS = [
    'email.smtp_server_address',
    'email.smtp_server_port',
    'email.username',
    'email.password',
    'email.from_address'
]

def _validate_key(ctx, param, value):
    if not value in _VALID_KEYS:
        raise click.BadParameter("key must be one of: %s" % _VALID_KEYS)
    return value

@click.group()
def cli():
    pass

@click.command()
@click.argument('key', callback=_validate_key)
def get(key):
    config.load()
    try:
        print config.get(str(key))
    except KeyError, e:
        print "Error: '%s' is not set." % key

@click.command()
@click.argument('key', callback=_validate_key)
@click.argument('value')
def set(key, value):
    config.load()
    print "setting '%s' to '%s'" % (str(key), str(value))
    config.set(str(key), str(value))
    config.save()
    print "done."

@click.command()
def show():
    config.load()
    num_keys = len(config.keys())
    print "Clacks Config (%s keys):" % num_keys
    if num_keys == 0:
        print "  <empty>"
    else:
        for k,v in config.iteritems():
            print "  '%s' = '%s'" % (k,v)

@click.command()
@click.confirmation_option(help='Are you sure you want to clear the Clacks settings file?')
def clear():
    print "clearing Clacks Config.."
    config.load()
    config._config = {}
    config.save()
    print "cleared."

if __name__ == '__main__':
    cli.add_command(get)
    cli.add_command(set)
    cli.add_command(show)
    cli.add_command(clear)

    cli()
